#!/usr/bin/with-contenv bashio

bashio::log.info "Preparing Z-Way server to start..."

# Default config path
defCJ=/opt/z-way-server/automation/defaultConfigs/config.json

bashio::log.info "Checking and updating default config path..."

# Change device path in /defailtConfig/config.json
if [ -f "$defCJ" ]; then
    if ! command -v bashio &> /dev/null; then
        # Running within Home Assistant addon
        device=$(bashio::config 'device')
    else
        # Running in standalone Docker container
        device=$(jq -r '.device' /data/options.json)
    fi

    jq --arg device "$device" '.instances[0].params.port = $device' $defCJ > $defCJ.tmp && mv $defCJ.tmp $defCJ
    echo "Device path in default config updated."
else
    echo "Default config not found."
fi

bashio::log.info "Processing folders and files for external /data directory..."

# Folders and files that we need to copy to the external /data directory
paths="/opt/z-way-server/automation/storage /opt/z-way-server/automation/userModules /opt/z-way-server/htdocs/smarthome/user/skin /opt/z-way-server/htdocs/smarthome/user/icons /etc/zbw"
for path in $paths; do
    # Ð¡heck the presence of the /data/ folder and the original server directories.
    if [ -e $path -a ! -e /data/$path ]; then
        # Make folders from the path variable with the exception of the last folder in the path
        mkdir -p /data/`dirname $path`
        # Moving files and folders from the standard directory to the /data folder
        mv $path /data/$path
        bashio::log.info "Moved ${path} to /data${path}."
    else
        rm -rf $path
        bashio::log.info "Removed existing ${path}."
    fi
    # Creating symlinks to the objects that we moved
    ln -sf /data$path $path
    bashio::log.info "Created symlink for ${path}."
done

bashio::log.info "Processing default config directory..."

# Change default config directory to configs/config for compatility with Docker, HA and Hub
if [ -e /opt/z-way-server/config -a ! -e /data/opt/z-way-server/configs/config ]; then
  # Change config path in defaultConfigs/config.json from config to configs/config
  jq '.instances[0].params.config = "configs/config"' $defCJ > $defCJ.tmp && mv $defCJ.tmp $defCJ
  # Make configs folder in external /data folder
  mkdir -p /data/opt/z-way-server/configs/
  # Move config folder from default docker image to external folder
  mv /opt/z-way-server/config/ /data/opt/z-way-server/configs/
  bashio::log.info "Moved default config directory."
else
  # Jut remove config folder from docker image dirrectory
  rm -rf /opt/z-way-server/config/
  bashio::log.info "Removed existing default config directory."
fi

# Make simlinks
ln -sf /data/opt/z-way-server/configs/ /opt/z-way-server/
bashio::log.info "Created symlink for default config directory."

bashio::log.info "Setting local IP..."
echo "$(hostname -I | awk '{print $1}')" > /opt/z-way-server/automation/localIP.json


echo "Processing user configjson file..."

# User configjson file path (using the known location)
userCJPath="/data/opt/z-way-server/automation/storage/configjson-"*.json

if [ ! -z "$(ls -A $userCJPath)" ]; then
    echo "User configjson file found: $(ls -A $userCJPath)"

    if ! command -v bashio &> /dev/null; then
        # Running within Home Assistant addon
        replaceOption=$(bashio::config 'configjson_device_replace')
        device=$(bashio::config 'device')
    else
        # Running in standalone Docker container
        if [[ -f "/data/options.json" ]]; then
            replaceOption=$(jq -r '.configjson_device_replace' /data/options.json)
            device=$(jq -r '.device' /data/options.json)
        else
            replaceOption=false
            device="/dev/ttyUSB0"
        fi
    fi

    # If force device selection is enabled (replaceOption is not empty)
    if [ "$replaceOption" = true ]; then
        jq --arg device "$device" '.instances[0].params.port = $device' $userCJPath > $userCJPath.tmp && mv $userCJPath.tmp $userCJPath
        echo "Device path in user config updated."

        # Read and log the updated port value
        updatedPort=$(jq -r '.instances[0].params.port' $userCJPath)
        echo "Updated port in configjson: $updatedPort"
    else
        echo "Force device selection is disabled. Skipping port update."
    fi
else
    echo "User configjson file not found. This is expected on the first start."
fi

# Read the log_level value from options.json using jq
# Check if running within Home Assistant addon environment
if ! command -v bashio &> /dev/null; then
    # Running within Home Assistant addon
    log_level=$(bashio::config 'log_level')
else
    # Running in standalone Docker container
    if [[ -f "/data/options.json" ]]; then
        log_level=$(jq -r '.log_level' /data/options.json)
    else
        log_level=0
    fi
fi

# Check if the logging level is a number between 0 and 6
if [[ "$log_level" =~ ^[0-6]$ ]]; then
    echo "Setting log level to $log_level"

    # Use sed to modify the logging level in the config.xml file
    sed -i "s|<log-level>.*</log-level>|<log-level>$log_level</log-level>|" /opt/z-way-server/config.xml
else
    echo "Invalid log level: $log_level. It should be a number between 0 and 6."
fi

bashio::log.info "Initialization script completed."
